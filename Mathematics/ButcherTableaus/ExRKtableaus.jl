

"""
Euler's method.
"""
function construct_Euler(T::Type = Float64)
    A = Matrix{T}(undef, 1, 1)
    A[1] = 0
    c = [0]
    α = [1]
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return (ExplicitRKTableau(A, c, α, 1, stability_size = 2.0))
end

"""
  Tableau of Runge's two-stage, 2nd order method, 
  also named `explicit midpoint method`
  Tableau_RK22
"""

function Tableau_Runge(::Type{T}=Float64) where {T}
    a = @big [[ 0      0    ]
              [ 1//2   0    ]]
    b = @big  [ 0,     1    ]
    c = @big  [ 0,     1//2 ]
    o = 2

    Tableau{T}(:Runge, o, a, b, c)
end


"""
Heun's Order 2 method.
Tableau_RK21
"""
function construct_Heun(T::Type = Float64)
    A = [0 0
         1 0]
    c = [0; 1]
    α = [1 // 2; 1 // 2]
    αEEst = [1; 0]
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 2, αEEst = αEEst, adaptiveorder = 1,
                              stability_size = 2.0))
end

"""
Ralston's Order 2 method.
"""
function construct_Ralston(T::Type = Float64)
    A = [0 0
         2//3 0]
    c = [0; 2 // 3]
    α = [1 // 4; 3 // 4]
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return (ExplicitRKTableau(A, c, α, 2, stability_size = 2.0))
end

function Tableau_RK31(::Type{T}=Float64) where {T}
    a = @big [[ 0      0      0    ]
              [ 2//3   0      0    ]
              [ 1//3   1//3   0    ]]
    b = @big  [ 1//4,  0,     3//4 ]
    c = @big  [ 0,     2//3,  2//3 ]
    o = 3

    Tableau{T}(:RK31, o, a, b, c)
end

function Tableau_Ralston3(::Type{T}=Float64) where {T}
    
    a = @big [[ 0      0      0    ]
              [ 1//2   0      0    ]
              [ 0      3//4   0    ]]
    b = @big  [ 2//9,  3//9,  4//9 ]
    c = @big  [ 0,     1//2,  3//4 ]
    o = 3

    Tableau{T}(:Ralston3, o, a, b, c)
end

 
"""
Kutta's Order 3 method.
Tableau_RK32
"""
function construct_Kutta3(T::Type = Float64)
    A = [0 0 0
         1//2 0 0
         -1 2 0]
    c = [0; 1 // 2; 1]
    α = [1 // 6; 2 // 3; 1 // 6]
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return (ExplicitRKTableau(A, c, α, 3, stability_size = 2.5127453266183286))
end

"""
construct_BogakiShampine3()

Constructs the tableau object for the Bogakai-Shampine Order 2/3 method.
"""
function construct_BogakiShampine3(T::Type = Float64)
    A = [0 0 0 0
         1//2 0 0 0
         0 3//4 0 0
         2//9 1//3 4//9 0]
    c = [0; 1 // 2; 3 // 4; 1]
    α = [2 // 9; 1 // 3; 4 // 9; 0]
    αEEst = [7 // 24; 1 // 4; 1 // 3; 1 // 8]
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 3, αEEst = αEEst, adaptiveorder = 2,
                              stability_size = 2.5127453266183286))
end

function Tableau_SSPRK3(::Type{T}=Float64) where {T}
     a = @big [[ 0      0      0    ]
               [ 1      0      0    ]
               [ 1//4   1//4   0    ]]
     b = @big  [ 1//6,  1//6,  4//6 ]
     c = @big  [ 0,     1,     1//2 ]
     o = 3
 
     Tableau{T}(:SSPRK3, o, a, b, c)
 end
 
"""
Runge-Kutta-Fehberg Order 4/3
"""
function construct_RKF4(T::Type = Float64)
    c = [0; 1 // 4; 4 // 9; 6 // 7; 1]
    A = [0 0 0 0 0
         1//4 0 0 0 0
         4//81 32//81 0 0 0
         57//98 -432//343 1053//686 0 0
         1//6 0 27//52 49//156 0]
    α = [43 // 288; 0; 243 // 416; 343 // 1872; 1 // 12]
    αEEst = [1 // 6; 0; 27 // 52; 49 // 156; 0]
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 4, αEEst = αEEst, adaptiveorder = 3,
                              stability_size = 4.109222736949077))
end

"""
Classic RK4 method.
Tableau_RK41 = Tableau_RK416
"""
function construct_RK4(T::Type = Float64)
    A = [0 0 0 0
         1//2 0 0 0
         0 1//2 0 0
         0 0 1 0]
    c = [0; 1 // 2; 1 // 2; 1]
    α = [1 // 6; 1 // 3; 1 // 3; 1 // 6]
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return (ExplicitRKTableau(A, c, α, 4, stability_size = 2.785293563405282))
end

"""
Tableau_RK42
"""
function Tableau_RK42(::Type{T}=Float64) where {T}
     a = @big [[ 0      0      0      0    ]
               [ 1//4   0      0      0    ]
               [ 0      1//2   0      0    ]
               [ 1     -2      1      0    ]]
     b = @big  [ 1//6,  0,     2//3,  1//6 ]
     c = @big  [ 0,     1//4,  1//2,  1    ]
     o = 4
 
     Tableau{T}(:RK42, o, a, b, c)
 end

"""
Classic RK4 3/8's rule method.
Tableau_RK438
"""
function construct_RK438Rule(T::Type = Float64)
    A = [0 0 0 0
         1//3 0 0 0
         -1//3 1 0 0
         1 -1 1 0]
    c = [0; 1 // 3; 2 // 3; 1]
    α = [1 // 8; 3 // 8; 3 // 8; 1 // 8]
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return (ExplicitRKTableau(A, c, α, 4, stability_size = 2.785293563405282))
end

"""
Ralston's Order 4 method with minimum truncation error.
"""
function construct_Ralston4(T::Type = Float64)
    sqrt5 = sqrt(convert(T, 5))
    a21 = 4 // 10
    a31 = (-2889 + 1428 * sqrt5) / 1024
    a32 = (3785 - 1620 * sqrt5) / 1024
    a41 = (-3365 + 2094 * sqrt5) / 6040
    a42 = (-975 - 3046 * sqrt5) / 2552
    a43 = (467040 + 203968 * sqrt5) / 240845
    A = [0 0 0 0
         a21 0 0 0
         a31 a32 0 0
         a41 a42 a43 0]
    b2 = 4 // 10
    b3 = (14 - 3 * sqrt5) / 16
    c = [0, b2, b3, 1]
    b1 = (263 + 24 * sqrt5) / 1812
    b2 = (125 - 1000 * sqrt5) / 3828
    b3 = 1024 * (3346 + 1623 * sqrt5) / 5924787
    b4 = (30 - 4 * sqrt5) / 123
    α = [b1, b2, b3, b4]
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return ExplicitRKTableau(A, c, α, 4, stability_size = 2.7852935634052822)
end

"""
construct_CashKarp()

Constructs the tableau object for the Cash-Karp Order 4/5 method.
"""
function construct_CashKarp(T::Type = Float64)
    A = [0 0 0 0 0 0
         1//5 0 0 0 0 0
         3//40 9//40 0 0 0 0
         3//10 -9//10 6//5 0 0 0
         -11//54 5//2 -70//27 35//27 0 0
         1631//55296 175//512 575//13824 44275//110592 253//4096 0]
    c = [0; 1 // 5; 3 // 10; 3 // 5; 1; 7 // 8]
    α = [37 // 378; 0; 250 // 621; 125 // 594; 0; 512 // 1771]
    αEEst = [2825 // 27648; 0; 18575 // 48384; 13525 // 55296; 277 // 14336; 1 // 4]
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 5, αEEst = αEEst, adaptiveorder = 4,
                              stability_size = 3.7343596072347225))
end

"""
Runge-Kutta-Fehlberg Order 4/5 method.
"""
function construct_RKF5(T::Type = Float64)
    A = [0 0 0 0 0 0
         1//4 0 0 0 0 0
         3//32 9//32 0 0 0 0
         1932//2197 -7200//2197 7296//2197 0 0 0
         439//216 -8 3680//513 -845//4104 0 0
         -8//27 2 -3544//2565 1859//4104 -11//40 0]
    c = [0; 1 // 4; 3 // 8; 12 // 13; 1; 1 // 2]
    α = [16 // 135; 0; 6656 // 12825; 28561 // 56430; -9 // 50; 2 // 55]
    αEEst = [25 // 216; 0; 1408 // 2565; 2197 // 4104; -1 // 5; 0]
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 5, αEEst = αEEst, adaptiveorder = 4,
                              stability_size = 3.6777066213218945))
end


"""

Lawson's 5th order scheme

An Order Five Runge Kutta Process with Extended Region of Stability, J. Douglas Lawson,
 Siam Journal on Numerical Analysis, Vol. 3, No. 4, (Dec., 1966) pages 593-597

"""
function construct_Lawson5(T::Type = Float64)
    A = zeros(T, 6, 6)
    c = zeros(T, 6)
    α = zeros(T, 6)
    c[2] = 1 // 12
    c[3] = 1 // 4
    c[4] = 1 // 2
    c[5] = 3 // 4
    c[6] = 1
    A[2, 1] = 1 // 12
    A[3, 1] = -1 // 8
    A[3, 2] = 3 // 8
    A[4, 1] = 3 // 5
    A[4, 2] = -9 // 10
    A[4, 3] = 4 // 5
    A[5, 1] = 39 // 80
    A[5, 2] = -9 // 20
    A[5, 3] = 3 // 20
    A[5, 4] = 9 // 16
    A[6, 1] = -59 // 35
    A[6, 2] = 66 // 35
    A[6, 3] = 48 // 35
    A[6, 4] = -12 // 7
    A[6, 5] = 8 // 7
    α[1] = 7 // 90
    α[2] = 0
    α[3] = 16 // 45
    α[4] = 2 // 15
    α[5] = 16 // 45
    α[6] = 7 // 90
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return (ExplicitRKTableau(A, c, α, 5, stability_size = 3.7343596072347225))
end

"""
  Tableau of explicit Runge-Kutta method of order five with six stages

  which is similar to the Lawson's 5th order scheme

  Reference:

  John C. Butcher
  Numerical Methods for Ordinary Differential Equations. Wiley, 2016.
  Page 103
"""

function Tableau_RK5(::Type{T}=Float64) where {T}
     a = @big [[ 0       0       0       0       0       0    ]
               [ 1//4    0       0       0       0       0    ]
               [ 1//8    1//8    0       0       0       0    ]
               [ 0       0       1//2    0       0       0    ]
               [ 3//16  -3//8    3//8    9//16   0       0    ]
               [-3//7    8//7    6//7   -12//7   8//7    0    ]]
     b = @big  [ 7//90,  0,      32//90, 12//90, 32//90, 7//90]
     c = @big  [ 0,      1//4,   1//4,   1//2,   3//4,   1    ]
     o = 5
 
     Tableau{T}(:RK5, o, a, b, c)
 end

 
"""

Runge's First Order 5 method

"""
function construct_RungeFirst5(T::Type = Float64)
    A = zeros(T, 6, 6)
    c = zeros(T, 6)
    α = zeros(T, 6)

    c[2] = 1 // 5
    c[3] = 2 // 5
    c[4] = 1
    c[5] = 3 // 5
    c[6] = 4 // 5

    A[2, 1] = 1 // 5
    A[3, 1] = 0
    A[3, 2] = 2 // 5
    A[4, 1] = 9 // 4
    A[4, 2] = -5
    A[4, 3] = 15 // 4
    A[5, 1] = -63 // 100
    A[5, 2] = 9 // 5
    A[5, 3] = -13 // 20
    A[5, 4] = 2 // 25
    A[6, 1] = -6 // 25
    A[6, 2] = 4 // 5
    A[6, 3] = 2 // 15
    A[6, 4] = 8 // 75
    A[6, 5] = 0

    α[1] = 17 // 144
    # α[2] = 0
    α[3] = 25 // 36
    α[4] = 1 // 72
    α[5] = -25 // 72
    α[6] = 25 // 48
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return (ExplicitRKTableau(A, c, α, 5, stability_size = 3.2170478666401054))
end

"""

Cassity's Order 5 method
"""
function construct_Cassity5(T::Type = Float64)
    A = zeros(T, 6, 6)
    c = zeros(T, 6)
    α = zeros(T, 6)
    c[2] = 1 // 7
    c[3] = 5 // 14
    c[4] = 9 // 14
    c[5] = 6 // 7
    c[6] = 1
    A[2, 1] = 1 // 7
    A[3, 1] = -367 // 4088
    A[3, 2] = 261 // 584
    A[4, 1] = 41991 // 2044
    A[4, 2] = -2493 // 73
    A[4, 3] = 57 // 4
    A[5, 1] = -108413 // 196224
    A[5, 2] = 58865 // 65408
    A[5, 3] = 5 // 16
    A[5, 4] = 265 // 1344
    A[6, 1] = -204419 // 58984
    A[6, 2] = 143829 // 58984
    A[6, 3] = 171 // 202
    A[6, 4] = 2205 // 404
    A[6, 5] = -432 // 101
    α[1] = 1 // 9
    α[2] = 7 // 2700
    α[3] = 413 // 810
    α[4] = 7 // 450
    α[5] = 28 // 75
    α[6] = -101 // 8100
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return (ExplicitRKTableau(A, c, α, 5, stability_size = 2.1686021275264866))
end

"""

Luther and Konen's First Order 5
Some Fifth-Order Classical Runge Kutta Formulas, H.A.Luther and H.P.Konen,
 Siam Review, Vol. 3, No. 7, (Oct., 1965) pages 551-558.

"""
function construct_LutherKonen5(T::Type = Float64)
    A = zeros(T, 6, 6)
    c = zeros(T, 6)
    α = zeros(T, 6)
    c[2] = 1 / 2
    c[3] = 1 / 2 - 1 / 10 * 5^(1 / 2)
    c[4] = 1 / 2
    c[5] = 1 / 2 + 1 / 10 * 5^(1 / 2)
    c[6] = 1
    A[2, 1] = 1 / 2
    A[3, 1] = 1 / 5
    A[3, 2] = 3 / 10 - 1 / 10 * 5^(1 / 2)
    A[4, 1] = 1 / 4
    A[4, 2] = 1 / 4
    A[4, 3] = 0
    A[5, 1] = 1 / 20 - 1 / 20 * 5^(1 / 2)
    A[5, 2] = -1 / 5
    A[5, 3] = 1 / 4 + 3 / 20 * 5^(1 / 2)
    A[5, 4] = 2 / 5
    A[6, 1] = 1 / 4 * 5^(1 / 2) - 1 / 4
    A[6, 2] = 1 / 2 * 5^(1 / 2) - 1 / 2
    A[6, 3] = 5 / 4 - 1 / 4 * 5^(1 / 2)
    A[6, 4] = -2
    A[6, 5] = 5 / 2 - 1 / 2 * 5^(1 / 2)
    α[1] = 1 / 12
    α[2] = 0
    α[3] = 5 / 12
    α[4] = 0
    α[5] = 5 / 12
    α[6] = 1 / 12
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return (ExplicitRKTableau(A, c, α, 5, stability_size = 3.217047866640106))
end

"""

Luther and Konen's Second Order 5
Some Fifth-Order Classical Runge Kutta Formulas, H.A.Luther and H.P.Konen,
 Siam Review, Vol. 3, No. 7, (Oct., 1965) pages 551-558.

"""
function construct_LutherKonen52(T::Type = Float64)
    A = zeros(T, 6, 6)
    c = zeros(T, 6)
    α = zeros(T, 6)
    c[2] = 2 / 5
    c[3] = 1 / 2
    c[4] = 1
    c[5] = 1 / 2 - 1 / 10 * 15^(1 / 2)
    c[6] = 1 / 2 + 1 / 10 * 15^(1 / 2)
    A[2, 1] = 2 / 5
    A[3, 1] = 3 / 16
    A[3, 2] = 5 / 16
    A[4, 1] = 1 / 4
    A[4, 2] = -5 / 4
    A[4, 3] = 2
    A[5, 1] = 3 / 20 - 1 / 100 * 15^(1 / 2)
    A[5, 2] = -1 / 4
    A[5, 3] = 3 / 5 - 2 / 25 * 15^(1 / 2)
    A[5, 4] = -1 / 100 * 15^(1 / 2)
    A[6, 1] = -3 / 20 - 1 / 20 * 15^(1 / 2)
    A[6, 2] = -1 / 4
    A[6, 3] = 3 / 5
    A[6, 4] = 3 / 10 - 1 / 20 * 15^(1 / 2)
    A[6, 5] = 1 / 5 * 15^(1 / 2)
    α[1] = 0
    α[2] = 0
    α[3] = 4 / 9
    α[4] = 0
    α[5] = 5 / 18
    α[6] = 5 / 18
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return (ExplicitRKTableau(A, c, α, 5, stability_size = 2.6515956444339794))
end

"""

Luther and Konen's Third Order 5
Some Fifth-Order Classical Runge Kutta Formulas, H.A.Luther and H.P.Konen,
 Siam Review, Vol. 3, No. 7, (Oct., 1965) pages 551-558.

"""
function construct_LutherKonen53(T::Type = Float64)
    A = zeros(T, 6, 6)
    c = zeros(T, 6)
    α = zeros(T, 6)
    c[2] = 3 / 25
    c[3] = 5 / 18
    c[4] = 45 / 89
    c[5] = 3 / 5 - 1 / 10 * 6^(1 / 2)
    c[6] = 3 / 5 + 1 / 10 * 6^(1 / 2)
    A[2, 1] = 3 / 25
    A[3, 1] = -85 / 1944
    A[3, 2] = 625 / 1944
    A[4, 1] = 610425 / 1409938
    A[4, 2] = -961875 / 1409938
    A[4, 3] = 532170 / 704969
    A[5, 1] = 7411 / 37500 - 673 / 18750 * 6^(1 / 2)
    A[5, 2] = 0
    A[5, 3] = 27621 / 228125 * 6^(1 / 2) - 6561 / 228125
    A[5, 4] = 1180229 / 2737500 - 126736 / 684375 * 6^(1 / 2)
    A[6, 1] = -5351 / 62500 - 7087 / 281250 * 6^(1 / 2)
    A[6, 2] = 0
    A[6, 3] = 2736423 / 1140625 + 786753 / 1140625 * 6^(1 / 2)
    A[6, 4] = 73736589 / 86687500 + 101816534 / 195046875 * 6^(1 / 2)
    A[6, 5] = -30448 / 11875 - 12903 / 11875 * 6^(1 / 2)
    α[1] = 1 / 9
    α[2] = 0
    α[3] = 0
    α[4] = 0
    α[5] = 4 / 9 + 1 / 36 * 6^(1 / 2)
    α[6] = 4 / 9 - 1 / 36 * 6^(1 / 2)
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    return (ExplicitRKTableau(A, c, α, 5, stability_size = 3.679935798458283))
end

"""

 S.N. Papakostas and G. PapaGeorgiou higher error more stable

 A Family of Fifth-order Runge-Kutta Pairs, by S.N. Papakostas and G. PapaGeorgiou,
 Mathematics of Computation,Volume 65, Number 215, July 1996, Pages 1165-1181.

"""
function construct_PapakostasPapaGeorgiou5(T::Type = Float64)
    A = zeros(T, 7, 7)
    c = zeros(T, 7)
    α = zeros(T, 7)
    αEEst = zeros(T, 7)
    c[2] = 64 // 315
    c[3] = 115 // 381
    c[4] = 762 // 935
    c[5] = 25 // 28
    c[6] = 1
    c[7] = 1
    A[2, 1] = 64 // 315
    A[3, 1] = 480815 // 6193536
    A[3, 2] = 462875 // 2064512
    A[4, 1] = 344904825219069 // 345923838700000
    A[4, 2] = -2360077908867 // 601606676000
    A[4, 3] = 40439332863108 // 10810119959375
    A[5, 1] = 12078745127989699 // 5009699157786624
    A[5, 2] = -791781731775 // 81669668864
    A[5, 3] = 39297175833216951 // 4694461413969824
    A[5, 4] = -10508413393960625 // 54097233987826176
    A[6, 1] = 2251421737440863 // 828701767536000
    A[6, 2] = -39895842357 // 3782730880
    A[6, 3] = 34564628685305112534 // 3916944972468643375
    A[6, 4] = 12051135495733565 // 36492943960723917
    A[6, 5] = -26808346215168 // 82592376030125
    A[7, 1] = 2405713 // 26289000
    A[7, 2] = 0
    A[7, 3] = 63896466577779 // 141024193000600
    A[7, 4] = 454128848141375 // 589615117674696
    A[7, 5] = -1359311744 // 2892576375
    A[7, 6] = 256979 // 1656648
    α[1] = 2405713 // 26289000
    α[2] = 0
    α[3] = 63896466577779 // 141024193000600
    α[4] = 454128848141375 // 589615117674696
    α[5] = -1359311744 // 2892576375
    α[6] = 256979 // 1656648
    αEEst[1] = 1818563883019 // 20194131951000
    αEEst[2] = 0
    αEEst[3] = 5513862498202899713 // 12036555896794210600
    αEEst[4] = 324806515311046773125 // 452918159177876804664
    αEEst[5] = -126112324722496 // 317422653663375
    αEEst[6] = 137695258717 // 1272569071032
    αEEst[7] = 1 // 42
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 5, αEEst = αEEst, adaptiveorder = 4, fsal = true,
                              stability_size = 3.306567892634947))
end

"""

 S.N. Papakostas and G. PapaGeorgiou less stable lower error
 Strictly better than DP5

 A Family of Fifth-order Runge-Kutta Pairs, by S.N. Papakostas and G. PapaGeorgiou,
 Mathematics of Computation,Volume 65, Number 215, July 1996, Pages 1165-1181.

"""
function construct_PapakostasPapaGeorgiou52(T::Type = Float64)
    A = zeros(T, 7, 7)
    c = zeros(T, 7)
    α = zeros(T, 7)
    αEEst = zeros(T, 7)

    c[2] = 35 // 159
    c[3] = 42 // 131
    c[4] = 131 // 143
    c[5] = 21 // 22
    c[6] = 1
    c[7] = 1
    A[2, 1] = 35 // 159
    A[3, 1] = 7476 // 85805
    A[3, 2] = 20034 // 85805
    A[4, 1] = 2438549411 // 1983961980
    A[4, 2] = -3707256508 // 716430715
    A[4, 3] = 25077455105 // 5158301148
    A[5, 1] = 105337889067 // 64388030080
    A[5, 2] = -1698584121 // 245755840
    A[5, 3] = 6869523776931 // 1096562558080
    A[5, 4] = -927215289 // 26981535520
    A[6, 1] = 67512025387 // 32454592380
    A[6, 2] = -20051384 // 2293935
    A[6, 3] = 10587214001321 // 1373901639516
    A[6, 4] = 731293420 // 8209319229
    A[6, 5] = -144610048 // 1077690663
    A[7, 1] = 669707 // 6932520
    A[7, 2] = 0
    A[7, 3] = 2215522905683 // 4570867891800
    A[7, 4] = 349043981 // 116904400
    A[7, 5] = -2234144 // 575505
    A[7, 6] = 9363 // 7120
    α[1] = 669707 // 6932520
    α[2] = 0
    α[3] = 2215522905683 // 4570867891800
    α[4] = 349043981 // 116904400
    α[5] = -2234144 // 575505
    α[6] = 9363 // 7120
    αEEst[1] = 2243660497 // 23535905400
    αEEst[2] = 0
    αEEst[3] = 7589131232781673 // 15518096492661000
    αEEst[4] = 1104461697911 // 396890438000
    αEEst[5] = -6925033984 // 1953839475
    αEEst[6] = 3529851 // 3021550
    αEEst[7] = 1 // 112

    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 5, αEEst = αEEst, adaptiveorder = 4, fsal = true,
                              stability_size = 3.4272251630453394))
end

"""
Runge–Kutta pairs of orders 5(4) using the minimal set of simplifying assumptions,
 by Ch. Tsitouras, TEI of Chalkis, Dept. of Applied Sciences, GR34400, Psahna, Greece.
"""
function construct_Tsitouras5(T::Type = Float64)
    A = zeros(T, 7, 7)
    c = zeros(T, 7)
    α = zeros(T, 7)
    αEEst = zeros(T, 7)
    c[2] = convert(T, 161 // 1000)
    c[3] = convert(T, 327 // 1000)
    c[4] = convert(T, 9 // 10)
    c[5] = convert(T,
                   big".9800255409045096857298102862870245954942137979563024768854764293221195950761080302604")
    c[6] = convert(T, 1)
    c[7] = convert(T, 1)
    A[2, 1] = convert(T, 161 // 1000)
    A[3, 1] = convert(T,
                      big"-.8480655492356988544426874250230774675121177393430391537369234245294192976164141156943e-2")
    A[3, 2] = convert(T,
                      big".3354806554923569885444268742502307746751211773934303915373692342452941929761641411569")
    A[4, 1] = convert(T,
                      big"2.897153057105493432130432594192938764924887287701866490314866693455023795137503079289")
    A[4, 2] = convert(T,
                      big"-6.359448489975074843148159912383825625952700647415626703305928850207288721235210244366")
    A[4, 3] = convert(T,
                      big"4.362295432869581411017727318190886861027813359713760212991062156752264926097707165077")
    A[5, 1] = convert(T,
                      big"5.325864828439256604428877920840511317836476253097040101202360397727981648835607691791")
    A[5, 2] = convert(T,
                      big"-11.74888356406282787774717033978577296188744178259862899288666928009020615663593781589")
    A[5, 3] = convert(T,
                      big"7.495539342889836208304604784564358155658679161518186721010132816213648793440552049753")
    A[5, 4] = convert(T,
                      big"-.9249506636175524925650207933207191611349983406029535244034750452930469056411389539635e-1")
    A[6, 1] = convert(T,
                      big"5.861455442946420028659251486982647890394337666164814434818157239052507339770711679748")
    A[6, 2] = convert(T,
                      big"-12.92096931784710929170611868178335939541780751955743459166312250439928519268343184452")
    A[6, 3] = convert(T,
                      big"8.159367898576158643180400794539253485181918321135053305748355423955009222648673734986")
    A[6, 4] = convert(T,
                      big"-.7158497328140099722453054252582973869127213147363544882721139659546372402303777878835e-1")
    A[6, 5] = convert(T,
                      big"-.2826905039406838290900305721271224146717633626879770007617876201276764571291579142206e-1")
    A[7, 1] = convert(T,
                      big".9646076681806522951816731316512876333711995238157997181903319145764851595234062815396e-1")
    A[7, 2] = convert(T, 1 // 100)
    A[7, 3] = convert(T,
                      big".4798896504144995747752495322905965199130404621990332488332634944254542060153074523509")
    A[7, 4] = convert(T,
                      big"1.379008574103741893192274821856872770756462643091360525934940067397245698027561293331")
    A[7, 5] = convert(T,
                      big"-3.290069515436080679901047585711363850115683290894936158531296799594813811049925401677")
    A[7, 6] = convert(T,
                      big"2.324710524099773982415355918398765796109060233222962411944060046314465391054716027841")
    α[1] = convert(T,
                   big".9646076681806522951816731316512876333711995238157997181903319145764851595234062815396e-1")
    α[2] = convert(T, 1 // 100)
    α[3] = convert(T,
                   big".4798896504144995747752495322905965199130404621990332488332634944254542060153074523509")
    α[4] = convert(T,
                   big"1.379008574103741893192274821856872770756462643091360525934940067397245698027561293331")
    α[5] = convert(T,
                   big"-3.290069515436080679901047585711363850115683290894936158531296799594813811049925401677")
    α[6] = convert(T,
                   big"2.324710524099773982415355918398765796109060233222962411944060046314465391054716027841")
    αEEst[1] = convert(T,
                       big".9468075576583945807478876255758922856117527357724631226139574065785592789071067303271e-1")
    αEEst[2] = convert(T,
                       big".9183565540343253096776363936645313759813746240984095238905939532922955247253608687270e-2")
    αEEst[3] = convert(T,
                       big".4877705284247615707855642599631228241516691959761363774365216240304071651579571959813")
    αEEst[4] = convert(T,
                       big"1.234297566930478985655109673884237654035539930748192848315425833500484878378061439761")
    αEEst[5] = convert(T,
                       big"-2.707712349983525454881109975059321670689605166938197378763992255714444407154902012702")
    αEEst[6] = convert(T,
                       big"1.866628418170587035753719399566211498666255505244122593996591602841258328965767580089")
    αEEst[7] = convert(T, 1 // 66)
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 5, αEEst = αEEst, adaptiveorder = 4, fsal = true,
                              stability_size = 3.5068469938049547))
end

"""

An Efficient Runge-Kutta (4,5) Pair by P.Bogacki and L.F.Shampine
 Computers and Mathematics with Applications, Vol. 32, No. 6, 1996, pages 15 to 28
"""
function construct_BogakiShampine5(T::Type = Float64)
    A = zeros(T, 8, 8)
    c = zeros(T, 8)
    α = zeros(T, 8)
    αEEst = zeros(T, 8)
    αEEst2 = zeros(T, 8)
    c[2] = 1 // 6
    c[3] = 2 // 9
    c[4] = 3 // 7
    c[5] = 2 // 3
    c[6] = 3 // 4
    c[7] = 1
    c[8] = 1
    A[2, 1] = 1 // 6
    A[3, 1] = 2 // 27
    A[3, 2] = 4 // 27
    A[4, 1] = 183 // 1372
    A[4, 2] = -162 // 343
    A[4, 3] = 1053 // 1372
    A[5, 1] = 68 // 297
    A[5, 2] = -4 // 11
    A[5, 3] = 42 // 143
    A[5, 4] = 1960 // 3861
    A[6, 1] = 597 // 22528
    A[6, 2] = 81 // 352
    A[6, 3] = 63099 // 585728
    A[6, 4] = 58653 // 366080
    A[6, 5] = 4617 // 20480
    A[7, 1] = 174197 // 959244
    A[7, 2] = -30942 // 79937
    A[7, 3] = 8152137 // 19744439
    A[7, 4] = 666106 // 1039181
    A[7, 5] = -29421 // 29068
    A[7, 6] = 482048 // 414219
    A[8, 1] = 587 // 8064
    A[8, 2] = 0
    A[8, 3] = 4440339 // 15491840
    A[8, 4] = 24353 // 124800
    A[8, 5] = 387 // 44800
    A[8, 6] = 2152 // 5985
    A[8, 7] = 7267 // 94080
    α[1] = 587 // 8064
    α[2] = 0
    α[3] = 4440339 // 15491840
    α[4] = 24353 // 124800
    α[5] = 387 // 44800
    α[6] = 2152 // 5985
    α[7] = 7267 // 94080
    α[8] = 0
    αEEst[1] = 6059 // 80640
    αEEst[2] = 0
    αEEst[3] = 8559189 // 30983680
    αEEst[4] = 26411 // 124800
    αEEst[5] = -927 // 89600
    αEEst[6] = 443 // 1197
    αEEst[7] = 7267 // 94080
    αEEst2[1] = 2479 // 34992
    αEEst2[2] = 0
    αEEst2[3] = 123 // 416
    αEEst2[4] = 612941 // 3411720
    αEEst2[5] = 43 // 1440
    αEEst2[6] = 2272 // 6561
    αEEst2[7] = 79937 // 1113912
    αEEst2[8] = 3293 // 556956
    return (ExplicitRKTableau(A, c, α, 5, αEEst = αEEst, adaptiveorder = 4,
                              stability_size = 3.9879271987261333))
end

"""
Explicit Runge-Kutta Pairs with One More Derivative Evaluation than the Minimum, by P.W.Sharp and E.Smart,
 Siam Journal of Scientific Computing, Vol. 14, No. 2, pages. 338-348, March 1993.

"""
function construct_SharpSmart5(T::Type = Float64)
    A = zeros(T, 7, 7)
    c = zeros(T, 7)
    α = zeros(T, 7)
    αEEst = zeros(T, 7)
    αEEst2 = zeros(T, 7)
    c[2] = 16 // 105
    c[3] = 8 // 35
    c[4] = 9 // 20
    c[5] = 2 // 3
    c[6] = 7 // 9
    c[7] = 1
    A[2, 1] = 16 // 105
    A[3, 1] = 2 // 35
    A[3, 2] = 6 // 35
    A[4, 1] = 8793 // 40960
    A[4, 2] = -5103 // 8192
    A[4, 3] = 17577 // 20480
    A[5, 1] = 347 // 1458
    A[5, 2] = -7 // 20
    A[5, 3] = 3395 // 10044
    A[5, 4] = 49792 // 112995
    A[6, 1] = -1223224109959 // 9199771214400
    A[6, 2] = 1234787701 // 2523942720
    A[6, 3] = 568994101921 // 3168810084960
    A[6, 4] = -105209683888 // 891227836395
    A[6, 5] = 9 // 25
    A[7, 1] = 2462504862877 // 8306031988800
    A[7, 2] = -123991 // 287040
    A[7, 3] = 106522578491 // 408709510560
    A[7, 4] = 590616498832 // 804646848915
    A[7, 5] = -319138726 // 534081275
    A[7, 6] = 52758 // 71449
    α[1] = 1093 // 15120
    α[2] = 0
    α[3] = 60025 // 190992
    α[4] = 3200 // 20709
    α[5] = 1611 // 11960
    α[6] = 712233 // 2857960
    α[7] = 3 // 40
    αEEst[1] = 84018211 // 991368000
    αEEst[2] = 0
    αEEst[3] = 92098979 // 357791680
    αEEst[4] = 17606944 // 67891005
    αEEst[5] = 3142101 // 235253200
    αEEst[6] = 22004596809 // 70270091500
    αEEst[7] = 9 // 125
    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 5, αEEst = αEEst, adaptiveorder = 4,
                              stability_size = 3.9156746135081772))
end

"""

Verner Order 5/6 method

A Contrast of a New RK56 pair with DP56, by Jim Verner,
 Department of Mathematics. Simon Fraser University, Burnaby, Canada, 2006.

"""
function construct_Verner6(T::Type = Float64)
    A = zeros(T, 8, 8)
    c = zeros(T, 8)
    α = zeros(T, 8)
    αEEst = zeros(T, 8)

    c[2] = 1 // 7
    c[3] = 2 // 9
    c[4] = 3 // 7
    c[5] = 2 // 3
    c[6] = 3 // 4
    c[7] = 1
    c[8] = 1
    A[2, 1] = 1 // 7
    A[3, 1] = 4 // 81
    A[3, 2] = 14 // 81
    A[4, 1] = 291 // 1372
    A[4, 2] = -27 // 49
    A[4, 3] = 1053 // 1372
    A[5, 1] = 86 // 297
    A[5, 2] = -14 // 33
    A[5, 3] = 42 // 143
    A[5, 4] = 1960 // 3861
    A[6, 1] = -267 // 22528
    A[6, 2] = 189 // 704
    A[6, 3] = 63099 // 585728
    A[6, 4] = 58653 // 366080
    A[6, 5] = 4617 // 20480
    A[7, 1] = 10949 // 6912
    A[7, 2] = -69 // 32
    A[7, 3] = -90891 // 68096
    A[7, 4] = 112931 // 25920
    A[7, 5] = -69861 // 17920
    A[7, 6] = 26378 // 10773
    A[8, 1] = 1501 // 19008
    A[8, 2] = -21 // 88
    A[8, 3] = 219519 // 347776
    A[8, 4] = 163807 // 926640
    A[8, 5] = -417 // 640
    A[8, 6] = 1544 // 1539
    A[8, 7] = 0
    α[1] = 79 // 1080
    α[2] = 0
    α[3] = 19683 // 69160
    α[4] = 16807 // 84240
    α[5] = 0
    α[6] = 2816 // 7695
    α[7] = 1 // 100
    α[8] = 187 // 2800
    αEEst[1] = 763 // 10800
    αEEst[2] = 0
    αEEst[3] = 59049 // 197600
    αEEst[4] = 88837 // 526500
    αEEst[5] = 243 // 4000
    αEEst[6] = 12352 // 38475
    αEEst[7] = 0
    αEEst[8] = 2 // 25

    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 6, adaptiveorder = 5, αEEst = αEEst,
                              stability_size = 3.9541297306311853))
end

"""

Dormand-Prince Order 5//6 method

P.J. Prince and J. R. Dormand, High order embedded Runge-Kutta formulae,
Journal of Computational and Applied Mathematics . 7 (1981), pp. 67-75.
"""
function construct_DormandPrince6(T::Type = Float64)
    A = zeros(T, 8, 8)
    c = zeros(T, 8)
    α = zeros(T, 8)
    αEEst = zeros(T, 8)

    c[2] = 1 // 10
    c[3] = 2 // 9
    c[4] = 3 // 7
    c[5] = 3 // 5
    c[6] = 4 // 5
    c[7] = 1
    c[8] = 1
    A[2, 1] = 1 // 10
    A[3, 1] = -2 // 81
    A[3, 2] = 20 // 81
    A[4, 1] = 615 // 1372
    A[4, 2] = -270 // 343
    A[4, 3] = 1053 // 1372
    A[5, 1] = 3243 // 5500
    A[5, 2] = -54 // 55
    A[5, 3] = 50949 // 71500
    A[5, 4] = 4998 // 17875
    A[6, 1] = -26492 // 37125
    A[6, 2] = 72 // 55
    A[6, 3] = 2808 // 23375
    A[6, 4] = -24206 // 37125
    A[6, 5] = 338 // 459
    A[7, 1] = 5561 // 2376
    A[7, 2] = -35 // 11
    A[7, 3] = -24117 // 31603
    A[7, 4] = 899983 // 200772
    A[7, 5] = -5225 // 1836
    A[7, 6] = 3925 // 4056
    A[8, 1] = 465467 // 266112
    A[8, 2] = -2945 // 1232
    A[8, 3] = -5610201 // 14158144
    A[8, 4] = 10513573 // 3212352
    A[8, 5] = -424325 // 205632
    A[8, 6] = 376225 // 454272
    A[8, 7] = 0
    α[1] = 61 // 864
    α[2] = 0
    α[3] = 98415 // 321776
    α[4] = 16807 // 146016
    α[5] = 1375 // 7344
    α[6] = 1375 // 5408
    α[7] = -37 // 1120
    α[8] = 1 // 10
    αEEst[1] = 821 // 10800
    αEEst[2] = 0
    αEEst[3] = 19683 // 71825
    αEEst[4] = 175273 // 912600
    αEEst[5] = 395 // 3672
    αEEst[6] = 785 // 2704
    αEEst[7] = 3 // 50
    αEEst[8] = 0

    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 6, adaptiveorder = 5, αEEst = αEEst,
                              stability_size = 3.954129730631186))
end

"""

Sharp-Verner Order 5/6 method

Completely Imbedded Runge-Kutta Pairs, by P. W. Sharp and J. H. Verner,
 SIAM Journal on Numerical Analysis, Vol. 31, No. 4. (Aug., 1994), pages. 1169 to 1190.
"""
function construct_SharpVerner6(T::Type = Float64)
    A = zeros(T, 9, 9)
    c = zeros(T, 9)
    α = zeros(T, 9)
    αEEst = zeros(T, 9)

    c[2] = 1 // 12
    c[3] = 2 // 15
    c[4] = 1 // 5
    c[5] = 8 // 15
    c[6] = 2 // 3
    c[7] = 19 // 20
    c[8] = 1
    c[9] = 1
    A[2, 1] = 1 // 12
    A[3, 1] = 2 // 75
    A[3, 2] = 8 // 75
    A[4, 1] = 1 // 20
    A[4, 2] = 0
    A[4, 3] = 3 // 20
    A[5, 1] = 88 // 135
    A[5, 2] = 0
    A[5, 3] = -112 // 45
    A[5, 4] = 64 // 27
    A[6, 1] = -10891 // 11556
    A[6, 2] = 0
    A[6, 3] = 3880 // 963
    A[6, 4] = -8456 // 2889
    A[6, 5] = 217 // 428
    A[7, 1] = 1718911 // 4382720
    A[7, 2] = 0
    A[7, 3] = -1000749 // 547840
    A[7, 4] = 819261 // 383488
    A[7, 5] = -671175 // 876544
    A[7, 6] = 14535 // 14336
    A[8, 1] = 85153 // 203300
    A[8, 2] = 0
    A[8, 3] = -6783 // 2140
    A[8, 4] = 10956 // 2675
    A[8, 5] = -38493 // 13375
    A[8, 6] = 1152 // 425
    A[8, 7] = -7168 // 40375
    A[9, 1] = 53 // 912
    A[9, 2] = 0
    A[9, 3] = 0
    A[9, 4] = 5 // 16
    A[9, 5] = 27 // 112
    A[9, 6] = 27 // 136
    A[9, 7] = 256 // 969
    A[9, 8] = -25 // 336
    α[1] = 53 // 912
    α[2] = 0
    α[3] = 0
    α[4] = 5 // 16
    α[5] = 27 // 112
    α[6] = 27 // 136
    α[7] = 256 // 969
    α[8] = -25 // 336
    αEEst[1] = 617 // 10944
    αEEst[2] = 0
    αEEst[3] = 0
    αEEst[4] = 241 // 756
    αEEst[5] = 69 // 320
    αEEst[6] = 435 // 1904
    αEEst[7] = 10304 // 43605
    αEEst[8] = 0
    αEEst[9] = -1 // 18

    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 6, adaptiveorder = 5, αEEst = αEEst, fsal = true,
                              stability_size = 4.470828492062036))
end

"""

Verner 1991 Second Order 5/6 method

Some Ruge-Kutta Formula Pairs, by J.H.Verner,
 SIAM Journal on Numerical Analysis, Vol. 28, No. 2 (April 1991), pages 496 to 511.
"""
function construct_Verner9162(T::Type = Float64)
    A = zeros(T, 9, 9)
    c = zeros(T, 9)
    α = zeros(T, 9)
    αEEst = zeros(T, 9)

    c[2] = 1 // 8
    c[3] = 1 // 6
    c[4] = 1 // 4
    c[5] = 1 // 2
    c[6] = 3 // 5
    c[7] = 4 // 5
    c[8] = 1
    c[9] = 1
    A[2, 1] = 1 // 8
    A[3, 1] = 1 // 18
    A[3, 2] = 1 // 9
    A[4, 1] = 1 // 16
    A[4, 2] = 0
    A[4, 3] = 3 // 16
    A[5, 1] = 1 // 4
    A[5, 2] = 0
    A[5, 3] = -3 // 4
    A[5, 4] = 1
    A[6, 1] = 134 // 625
    A[6, 2] = 0
    A[6, 3] = -333 // 625
    A[6, 4] = 476 // 625
    A[6, 5] = 98 // 625
    A[7, 1] = -98 // 1875
    A[7, 2] = 0
    A[7, 3] = 12 // 625
    A[7, 4] = 10736 // 13125
    A[7, 5] = -1936 // 1875
    A[7, 6] = 22 // 21
    A[8, 1] = 9 // 50
    A[8, 2] = 0
    A[8, 3] = 21 // 25
    A[8, 4] = -2924 // 1925
    A[8, 5] = 74 // 25
    A[8, 6] = -15 // 7
    A[8, 7] = 15 // 22
    A[9, 1] = 11 // 144
    A[9, 2] = 0
    A[9, 3] = 0
    A[9, 4] = 256 // 693
    A[9, 5] = 0
    A[9, 6] = 125 // 504
    A[9, 7] = 125 // 528
    A[9, 8] = 5 // 72
    α[1] = 11 // 144
    α[2] = 0
    α[3] = 0
    α[4] = 256 // 693
    α[5] = 0
    α[6] = 125 // 504
    α[7] = 125 // 528
    α[8] = 5 // 72
    αEEst[1] = 1 // 18
    αEEst[2] = 0
    αEEst[3] = 0
    αEEst[4] = 32 // 63
    αEEst[5] = -2 // 3
    αEEst[6] = 125 // 126
    αEEst[7] = 0
    αEEst[8] = -5 // 63
    αEEst[9] = 4 // 21

    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 6, adaptiveorder = 5, αEEst = αEEst,
                              stability_size = 4.239991338165166))
end

"""

Verner 1991 First Order 5/6 method

Some Ruge-Kutta Formula Pairs, by J.H.Verner,
 SIAM Journal on Numerical Analysis, Vol. 28, No. 2 (April 1991), pages 496 to 511.
"""
function construct_Verner916(T::Type = Float64)
    A = zeros(T, 9, 9)
    c = zeros(T, 9)
    α = zeros(T, 9)
    αEEst = zeros(T, 9)

    c[2] = 1 // 8
    c[3] = 4 // 9 - 4 // 45 * 10^(1 // 2)
    c[4] = 2 // 3 - 2 // 15 * 10^(1 // 2)
    c[5] = 9 // 16
    c[6] = 1 // 2
    c[7] = 9 // 10
    c[8] = 1
    c[9] = 1
    A[2, 1] = 1 // 8
    A[3, 1] = -268 // 405 + 92 // 405 * 10^(1 // 2)
    A[3, 2] = 448 // 405 - 128 // 405 * 10^(1 // 2)
    A[4, 1] = 1 // 6 - 1 // 30 * 10^(1 // 2)
    A[4, 2] = 0
    A[4, 3] = 1 // 2 - 1 // 10 * 10^(1 // 2)
    A[5, 1] = 11547 // 32768 + 405 // 16384 * 10^(1 // 2)
    A[5, 2] = 0
    A[5, 3] = -18225 // 32768 - 5103 // 16384 * 10^(1 // 2)
    A[5, 4] = 12555 // 16384 + 2349 // 8192 * 10^(1 // 2)
    A[6, 1] = 19662371 // 51149376 + 441281 // 12787344 * 10^(1 // 2)
    A[6, 2] = 0
    A[6, 3] = -3786045 // 5683264 - 252663 // 710408 * 10^(1 // 2)
    A[6, 4] = 1570556745 // 1821486112 + 290041461 // 910743056 * 10^(1 // 2)
    A[6, 5] = -41227072 // 512292969 + 1374464 // 512292969 * 10^(1 // 2)
    A[7, 1] = -154207593 // 369412160 - 1829424339 // 11544130000 * 10^(1 // 2)
    A[7, 2] = 0
    A[7, 3] = 2659895739 // 1847060800 + 653855409 // 1154413000 * 10^(1 // 2)
    A[7, 4] = -349492176711 // 591982986400 - 359784638379 // 1479957466000 * 10^(1 // 2)
    A[7, 5] = 153920585664 // 92497341625 + 311066673408 // 462486708125 * 10^(1 // 2)
    A[7, 6] = -1944 // 1625 - 6804 // 8125 * 10^(1 // 2)
    A[8, 1] = 70594945601 // 21406013856 + 21473424323 // 21406013856 * 10^(1 // 2)
    A[8, 2] = 0
    A[8, 3] = -794525145 // 88090592 - 249156075 // 88090592 * 10^(1 // 2)
    A[8, 4] = 866290968775 // 254097312624 + 256998959765 // 254097312624 * 10^(1 // 2)
    A[8, 5] = -15964196472448 // 1286367645159 -
              5039429245312 // 1286367645159 * 10^(1 // 2)
    A[8, 6] = 17017 // 1116 + 5075 // 1116 * 10^(1 // 2)
    A[8, 7] = 42875 // 90396 + 16625 // 90396 * 10^(1 // 2)
    A[9, 1] = 31 // 324 - 37 // 4860 * 10^(1 // 2)
    A[9, 2] = 0
    A[9, 3] = 0
    A[9, 4] = 37435 // 69228 - 3235 // 69228 * 10^(1 // 2)
    A[9, 5] = -1245184 // 1090341 + 9699328 // 16355115 * 10^(1 // 2)
    A[9, 6] = 71 // 54 - 74 // 135 * 10^(1 // 2)
    A[9, 7] = 625 // 486 - 250 // 729 * 10^(1 // 2)
    A[9, 8] = -23 // 21 + 37 // 105 * 10^(1 // 2)
    α[1] = 31 // 324 - 37 // 4860 * 10^(1 // 2)
    α[2] = 0
    α[3] = 0
    α[4] = 37435 // 69228 - 3235 // 69228 * 10^(1 // 2)
    α[5] = -1245184 // 1090341 + 9699328 // 16355115 * 10^(1 // 2)
    α[6] = 71 // 54 - 74 // 135 * 10^(1 // 2)
    α[7] = 625 // 486 - 250 // 729 * 10^(1 // 2)
    α[8] = -23 // 21 + 37 // 105 * 10^(1 // 2)
    αEEst[1] = 5 // 54 - 2 // 135 * 10^(1 // 2)
    αEEst[2] = 0
    αEEst[3] = 0
    αEEst[4] = 2390 // 17307 + 2290 // 17307 * 10^(1 // 2)
    αEEst[5] = 40960 // 121149 + 262144 // 605745 * 10^(1 // 2)
    αEEst[6] = 2 // 27 - 64 // 135 * 10^(1 // 2)
    αEEst[7] = 0
    αEEst[8] = 150029 // 443709 - 236267 // 2218545 * 10^(1 // 2)
    αEEst[9] = 2411 // 126774 + 1921 // 63387 * 10^(1 // 2)

    A = map(T, A)
    α = map(T, α)
    c = map(T, c)
    αEEst = map(T, αEEst)
    return (ExplicitRKTableau(A, c, α, 6, adaptiveorder = 5, αEEst = αEEst,
                              stability_size = 4.250607671658528))
end
